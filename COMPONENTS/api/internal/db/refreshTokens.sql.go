// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refreshTokens.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteRefreshTokenById = `-- name: DeleteRefreshTokenById :exec
DELETE FROM refresh_tokens
WHERE id = $1::uuid
`

func (q *Queries) DeleteRefreshTokenById(ctx context.Context, dollar_1 uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRefreshTokenById, dollar_1)
	return err
}

const doesRefreshTokenExist = `-- name: DoesRefreshTokenExist :one
SELECT EXISTS(
        SELECT 1
        FROM refresh_tokens
        WHERE id = $1::uuid
    )
`

func (q *Queries) DoesRefreshTokenExist(ctx context.Context, dollar_1 uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, doesRefreshTokenExist, dollar_1)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const insertRefreshToken = `-- name: InsertRefreshToken :one
INSERT INTO refresh_tokens (user_id, expiry_date)
VALUES ($1, $2)
RETURNING id,
    user_id,
    expiry_date,
    created_at,
    modified_at
`

type InsertRefreshTokenParams struct {
	UserID     int32
	ExpiryDate time.Time
}

type InsertRefreshTokenRow struct {
	ID         uuid.UUID
	UserID     int32
	ExpiryDate time.Time
	CreatedAt  time.Time
	ModifiedAt pgtype.Timestamptz
}

func (q *Queries) InsertRefreshToken(ctx context.Context, arg InsertRefreshTokenParams) (InsertRefreshTokenRow, error) {
	row := q.db.QueryRow(ctx, insertRefreshToken, arg.UserID, arg.ExpiryDate)
	var i InsertRefreshTokenRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExpiryDate,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}
