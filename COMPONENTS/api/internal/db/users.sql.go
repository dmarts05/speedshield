// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const doesUserAlreadyExist = `-- name: DoesUserAlreadyExist :one
SELECT EXISTS (
    SELECT 1
    FROM users
    WHERE username = $1
    OR email = $2
)
`

type DoesUserAlreadyExistParams struct {
	Username string
	Email    string
}

func (q *Queries) DoesUserAlreadyExist(ctx context.Context, arg DoesUserAlreadyExistParams) (bool, error) {
	row := q.db.QueryRow(ctx, doesUserAlreadyExist, arg.Username, arg.Email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const findUserById = `-- name: FindUserById :one
SELECT id, username, email, password_hash, created_at, modified_at
FROM users
WHERE id = $1
`

func (q *Queries) FindUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, findUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users
(
    username,
    email,
    password_hash
)
VALUES
($1, $2, $3)
RETURNING id, username, email, created_at, modified_at
`

type InsertUserParams struct {
	Username     string
	Email        string
	PasswordHash string
}

type InsertUserRow struct {
	ID         int32
	Username   string
	Email      string
	CreatedAt  pgtype.Timestamp
	ModifiedAt pgtype.Timestamp
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Username, arg.Email, arg.PasswordHash)
	var i InsertUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}
